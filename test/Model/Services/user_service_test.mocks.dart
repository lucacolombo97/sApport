// Mocks generated by Mockito 5.0.17 from annotations
// in sApport/test/Model/Services/user_service_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:flutter_form_bloc/flutter_form_bloc.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sApport/Model/DBItems/user.dart' as _i3;
import 'package:sApport/Model/Map/place.dart' as _i8;
import 'package:sApport/Model/Services/map_service.dart' as _i4;
import 'package:sApport/Views/Signup/BaseUser/components/form/base_user_signup_form.dart'
    as _i5;
import 'package:sApport/Views/Signup/Expert/components/form/expert_signup_form.dart'
    as _i7;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTextFieldBloc_0<ExtraData> extends _i1.Fake
    implements _i2.TextFieldBloc<ExtraData> {}

class _FakeInputFieldBloc_1<Value, ExtraData> extends _i1.Fake
    implements _i2.InputFieldBloc<Value, ExtraData> {}

class _FakeUser_2 extends _i1.Fake implements _i3.User {}

class _FakeFormBlocState_3<SuccessResponse, FailureResponse> extends _i1.Fake
    implements _i2.FormBlocState<SuccessResponse, FailureResponse> {}

class _FakeMapService_4 extends _i1.Fake implements _i4.MapService {}

/// A class which mocks [BaseUserSignUpForm].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseUserSignUpForm extends _i1.Mock
    implements _i5.BaseUserSignUpForm {
  MockBaseUserSignUpForm() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TextFieldBloc<dynamic> get nameText =>
      (super.noSuchMethod(Invocation.getter(#nameText),
              returnValue: _FakeTextFieldBloc_0<dynamic>())
          as _i2.TextFieldBloc<dynamic>);
  @override
  _i2.TextFieldBloc<dynamic> get surnameText =>
      (super.noSuchMethod(Invocation.getter(#surnameText),
              returnValue: _FakeTextFieldBloc_0<dynamic>())
          as _i2.TextFieldBloc<dynamic>);
  @override
  _i2.InputFieldBloc<DateTime?, Object> get birthDate =>
      (super.noSuchMethod(Invocation.getter(#birthDate),
              returnValue: _FakeInputFieldBloc_1<DateTime?, Object>())
          as _i2.InputFieldBloc<DateTime?, Object>);
  @override
  _i3.User get user =>
      (super.noSuchMethod(Invocation.getter(#user), returnValue: _FakeUser_2())
          as _i3.User);
  @override
  _i2.FormBlocState<String, String> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeFormBlocState_3<String, String>())
          as _i2.FormBlocState<String, String>);
  @override
  _i6.Stream<_i2.FormBlocState<String, String>> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.FormBlocState<String, String>>.empty())
          as _i6.Stream<_i2.FormBlocState<String, String>>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void onSubmitting() =>
      super.noSuchMethod(Invocation.method(#onSubmitting, []),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  void onDeleting() => super.noSuchMethod(Invocation.method(#onDeleting, []),
      returnValueForMissingStub: null);
  @override
  void onLoading() => super.noSuchMethod(Invocation.method(#onLoading, []),
      returnValueForMissingStub: null);
  @override
  void onCancelingSubmission() =>
      super.noSuchMethod(Invocation.method(#onCancelingSubmission, []),
          returnValueForMissingStub: null);
  @override
  void submit() => super.noSuchMethod(Invocation.method(#submit, []),
      returnValueForMissingStub: null);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  void reload() => super.noSuchMethod(Invocation.method(#reload, []),
      returnValueForMissingStub: null);
  @override
  void delete() => super.noSuchMethod(Invocation.method(#delete, []),
      returnValueForMissingStub: null);
  @override
  void cancelSubmission() =>
      super.noSuchMethod(Invocation.method(#cancelSubmission, []),
          returnValueForMissingStub: null);
  @override
  void addFieldBloc(
          {int? step = 0, _i2.FieldBloc<_i2.FieldBlocStateBase>? fieldBloc}) =>
      super.noSuchMethod(
          Invocation.method(
              #addFieldBloc, [], {#step: step, #fieldBloc: fieldBloc}),
          returnValueForMissingStub: null);
  @override
  void addFieldBlocs(
          {int? step = 0,
          List<_i2.FieldBloc<_i2.FieldBlocStateBase>>? fieldBlocs}) =>
      super.noSuchMethod(
          Invocation.method(
              #addFieldBlocs, [], {#step: step, #fieldBlocs: fieldBlocs}),
          returnValueForMissingStub: null);
  @override
  void previousStep() =>
      super.noSuchMethod(Invocation.method(#previousStep, []),
          returnValueForMissingStub: null);
  @override
  void updateCurrentStep(int? step) =>
      super.noSuchMethod(Invocation.method(#updateCurrentStep, [step]),
          returnValueForMissingStub: null);
  @override
  void removeFieldBloc({_i2.FieldBloc<_i2.FieldBlocStateBase>? fieldBloc}) =>
      super.noSuchMethod(
          Invocation.method(#removeFieldBloc, [], {#fieldBloc: fieldBloc}),
          returnValueForMissingStub: null);
  @override
  void removeFieldBlocs(
          {List<_i2.FieldBloc<_i2.FieldBlocStateBase>>? fieldBlocs}) =>
      super.noSuchMethod(
          Invocation.method(#removeFieldBlocs, [], {#fieldBlocs: fieldBlocs}),
          returnValueForMissingStub: null);
  @override
  void emitLoading({double? progress = 0.0}) => super.noSuchMethod(
      Invocation.method(#emitLoading, [], {#progress: progress}),
      returnValueForMissingStub: null);
  @override
  void emitLoadFailed({String? failureResponse}) => super.noSuchMethod(
      Invocation.method(
          #emitLoadFailed, [], {#failureResponse: failureResponse}),
      returnValueForMissingStub: null);
  @override
  void emitLoaded() => super.noSuchMethod(Invocation.method(#emitLoaded, []),
      returnValueForMissingStub: null);
  @override
  void emitSubmitting({double? progress}) => super.noSuchMethod(
      Invocation.method(#emitSubmitting, [], {#progress: progress}),
      returnValueForMissingStub: null);
  @override
  void emitSuccess(
          {String? successResponse, bool? canSubmitAgain, bool? isEditing}) =>
      super.noSuchMethod(
          Invocation.method(#emitSuccess, [], {
            #successResponse: successResponse,
            #canSubmitAgain: canSubmitAgain,
            #isEditing: isEditing
          }),
          returnValueForMissingStub: null);
  @override
  void emitFailure({String? failureResponse}) => super.noSuchMethod(
      Invocation.method(#emitFailure, [], {#failureResponse: failureResponse}),
      returnValueForMissingStub: null);
  @override
  void emitSubmissionCancelled() =>
      super.noSuchMethod(Invocation.method(#emitSubmissionCancelled, []),
          returnValueForMissingStub: null);
  @override
  void emitDeleteFailed({String? failureResponse}) => super.noSuchMethod(
      Invocation.method(
          #emitDeleteFailed, [], {#failureResponse: failureResponse}),
      returnValueForMissingStub: null);
  @override
  void emitDeleteSuccessful({String? successResponse}) => super.noSuchMethod(
      Invocation.method(
          #emitDeleteSuccessful, [], {#successResponse: successResponse}),
      returnValueForMissingStub: null);
  @override
  void emitUpdatingFields({double? progress}) => super.noSuchMethod(
      Invocation.method(#emitUpdatingFields, [], {#progress: progress}),
      returnValueForMissingStub: null);
  @override
  void add(_i2.FormBlocEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i2.FormBlocEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i2.FormBlocState<String, String>? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i2.FormBlocEvent>(
          _i2.EventHandler<E, _i2.FormBlocState<String, String>>? handler,
          {_i2.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i2.Transition<_i2.FormBlocEvent, _i2.FormBlocState<String, String>>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i2.Change<_i2.FormBlocState<String, String>>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [ExpertSignUpForm].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpertSignUpForm extends _i1.Mock implements _i7.ExpertSignUpForm {
  MockExpertSignUpForm() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MapService get mapService =>
      (super.noSuchMethod(Invocation.getter(#mapService),
          returnValue: _FakeMapService_4()) as _i4.MapService);
  @override
  set expertAddress(_i8.Place? _expertAddress) =>
      super.noSuchMethod(Invocation.setter(#expertAddress, _expertAddress),
          returnValueForMissingStub: null);
  @override
  set profilePhoto(String? _profilePhoto) =>
      super.noSuchMethod(Invocation.setter(#profilePhoto, _profilePhoto),
          returnValueForMissingStub: null);
  @override
  _i2.TextFieldBloc<dynamic> get countryText =>
      (super.noSuchMethod(Invocation.getter(#countryText),
              returnValue: _FakeTextFieldBloc_0<dynamic>())
          as _i2.TextFieldBloc<dynamic>);
  @override
  _i2.TextFieldBloc<dynamic> get cityText =>
      (super.noSuchMethod(Invocation.getter(#cityText),
              returnValue: _FakeTextFieldBloc_0<dynamic>())
          as _i2.TextFieldBloc<dynamic>);
  @override
  _i2.TextFieldBloc<dynamic> get streetText =>
      (super.noSuchMethod(Invocation.getter(#streetText),
              returnValue: _FakeTextFieldBloc_0<dynamic>())
          as _i2.TextFieldBloc<dynamic>);
  @override
  _i2.TextFieldBloc<dynamic> get houseNumber =>
      (super.noSuchMethod(Invocation.getter(#houseNumber),
              returnValue: _FakeTextFieldBloc_0<dynamic>())
          as _i2.TextFieldBloc<dynamic>);
  @override
  _i2.TextFieldBloc<dynamic> get phoneNumber =>
      (super.noSuchMethod(Invocation.getter(#phoneNumber),
              returnValue: _FakeTextFieldBloc_0<dynamic>())
          as _i2.TextFieldBloc<dynamic>);
  @override
  _i3.User get user =>
      (super.noSuchMethod(Invocation.getter(#user), returnValue: _FakeUser_2())
          as _i3.User);
  @override
  _i2.TextFieldBloc<dynamic> get nameText =>
      (super.noSuchMethod(Invocation.getter(#nameText),
              returnValue: _FakeTextFieldBloc_0<dynamic>())
          as _i2.TextFieldBloc<dynamic>);
  @override
  _i2.TextFieldBloc<dynamic> get surnameText =>
      (super.noSuchMethod(Invocation.getter(#surnameText),
              returnValue: _FakeTextFieldBloc_0<dynamic>())
          as _i2.TextFieldBloc<dynamic>);
  @override
  _i2.InputFieldBloc<DateTime?, Object> get birthDate =>
      (super.noSuchMethod(Invocation.getter(#birthDate),
              returnValue: _FakeInputFieldBloc_1<DateTime?, Object>())
          as _i2.InputFieldBloc<DateTime?, Object>);
  @override
  _i2.FormBlocState<String, String> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeFormBlocState_3<String, String>())
          as _i2.FormBlocState<String, String>);
  @override
  _i6.Stream<_i2.FormBlocState<String, String>> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.FormBlocState<String, String>>.empty())
          as _i6.Stream<_i2.FormBlocState<String, String>>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void onSubmitting() =>
      super.noSuchMethod(Invocation.method(#onSubmitting, []),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  void onDeleting() => super.noSuchMethod(Invocation.method(#onDeleting, []),
      returnValueForMissingStub: null);
  @override
  void onLoading() => super.noSuchMethod(Invocation.method(#onLoading, []),
      returnValueForMissingStub: null);
  @override
  void onCancelingSubmission() =>
      super.noSuchMethod(Invocation.method(#onCancelingSubmission, []),
          returnValueForMissingStub: null);
  @override
  void submit() => super.noSuchMethod(Invocation.method(#submit, []),
      returnValueForMissingStub: null);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  void reload() => super.noSuchMethod(Invocation.method(#reload, []),
      returnValueForMissingStub: null);
  @override
  void delete() => super.noSuchMethod(Invocation.method(#delete, []),
      returnValueForMissingStub: null);
  @override
  void cancelSubmission() =>
      super.noSuchMethod(Invocation.method(#cancelSubmission, []),
          returnValueForMissingStub: null);
  @override
  void addFieldBloc(
          {int? step = 0, _i2.FieldBloc<_i2.FieldBlocStateBase>? fieldBloc}) =>
      super.noSuchMethod(
          Invocation.method(
              #addFieldBloc, [], {#step: step, #fieldBloc: fieldBloc}),
          returnValueForMissingStub: null);
  @override
  void addFieldBlocs(
          {int? step = 0,
          List<_i2.FieldBloc<_i2.FieldBlocStateBase>>? fieldBlocs}) =>
      super.noSuchMethod(
          Invocation.method(
              #addFieldBlocs, [], {#step: step, #fieldBlocs: fieldBlocs}),
          returnValueForMissingStub: null);
  @override
  void previousStep() =>
      super.noSuchMethod(Invocation.method(#previousStep, []),
          returnValueForMissingStub: null);
  @override
  void updateCurrentStep(int? step) =>
      super.noSuchMethod(Invocation.method(#updateCurrentStep, [step]),
          returnValueForMissingStub: null);
  @override
  void removeFieldBloc({_i2.FieldBloc<_i2.FieldBlocStateBase>? fieldBloc}) =>
      super.noSuchMethod(
          Invocation.method(#removeFieldBloc, [], {#fieldBloc: fieldBloc}),
          returnValueForMissingStub: null);
  @override
  void removeFieldBlocs(
          {List<_i2.FieldBloc<_i2.FieldBlocStateBase>>? fieldBlocs}) =>
      super.noSuchMethod(
          Invocation.method(#removeFieldBlocs, [], {#fieldBlocs: fieldBlocs}),
          returnValueForMissingStub: null);
  @override
  void emitLoading({double? progress = 0.0}) => super.noSuchMethod(
      Invocation.method(#emitLoading, [], {#progress: progress}),
      returnValueForMissingStub: null);
  @override
  void emitLoadFailed({String? failureResponse}) => super.noSuchMethod(
      Invocation.method(
          #emitLoadFailed, [], {#failureResponse: failureResponse}),
      returnValueForMissingStub: null);
  @override
  void emitLoaded() => super.noSuchMethod(Invocation.method(#emitLoaded, []),
      returnValueForMissingStub: null);
  @override
  void emitSubmitting({double? progress}) => super.noSuchMethod(
      Invocation.method(#emitSubmitting, [], {#progress: progress}),
      returnValueForMissingStub: null);
  @override
  void emitSuccess(
          {String? successResponse, bool? canSubmitAgain, bool? isEditing}) =>
      super.noSuchMethod(
          Invocation.method(#emitSuccess, [], {
            #successResponse: successResponse,
            #canSubmitAgain: canSubmitAgain,
            #isEditing: isEditing
          }),
          returnValueForMissingStub: null);
  @override
  void emitFailure({String? failureResponse}) => super.noSuchMethod(
      Invocation.method(#emitFailure, [], {#failureResponse: failureResponse}),
      returnValueForMissingStub: null);
  @override
  void emitSubmissionCancelled() =>
      super.noSuchMethod(Invocation.method(#emitSubmissionCancelled, []),
          returnValueForMissingStub: null);
  @override
  void emitDeleteFailed({String? failureResponse}) => super.noSuchMethod(
      Invocation.method(
          #emitDeleteFailed, [], {#failureResponse: failureResponse}),
      returnValueForMissingStub: null);
  @override
  void emitDeleteSuccessful({String? successResponse}) => super.noSuchMethod(
      Invocation.method(
          #emitDeleteSuccessful, [], {#successResponse: successResponse}),
      returnValueForMissingStub: null);
  @override
  void emitUpdatingFields({double? progress}) => super.noSuchMethod(
      Invocation.method(#emitUpdatingFields, [], {#progress: progress}),
      returnValueForMissingStub: null);
  @override
  void add(_i2.FormBlocEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i2.FormBlocEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i2.FormBlocState<String, String>? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i2.FormBlocEvent>(
          _i2.EventHandler<E, _i2.FormBlocState<String, String>>? handler,
          {_i2.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i2.Transition<_i2.FormBlocEvent, _i2.FormBlocState<String, String>>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i2.Change<_i2.FormBlocState<String, String>>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
