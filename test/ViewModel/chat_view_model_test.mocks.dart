// Mocks generated by Mockito 5.0.17 from annotations
// in sApport/test/ViewModel/chat_view_model_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sApport/Model/Chat/chat.dart' as _i8;
import 'package:sApport/Model/DBItems/BaseUser/base_user.dart' as _i6;
import 'package:sApport/Model/DBItems/BaseUser/diary_page.dart' as _i11;
import 'package:sApport/Model/DBItems/BaseUser/report.dart' as _i10;
import 'package:sApport/Model/DBItems/Expert/expert.dart' as _i7;
import 'package:sApport/Model/DBItems/message.dart' as _i9;
import 'package:sApport/Model/DBItems/user.dart' as _i5;
import 'package:sApport/Model/Services/firestore_service.dart' as _i3;
import 'package:sApport/Model/Services/user_service.dart' as _i12;
import 'package:sApport/ViewModel/Forms/Authentication/base_user_signup_form.dart'
    as _i13;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeQuerySnapshot_0<T extends Object?> extends _i1.Fake
    implements _i2.QuerySnapshot<T> {}

/// A class which mocks [FirestoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreService extends _i1.Mock implements _i3.FirestoreService {
  MockFirestoreService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> addUserIntoDB(_i5.User? user) =>
      (super.noSuchMethod(Invocation.method(#addUserIntoDB, [user]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> removeUserFromDB(_i5.User? user) =>
      (super.noSuchMethod(Invocation.method(#removeUserFromDB, [user]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateUserFieldIntoDB(
          _i5.User? user, String? field, dynamic newValue) =>
      (super.noSuchMethod(
          Invocation.method(#updateUserFieldIntoDB, [user, field, newValue]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i2.QuerySnapshot<Object?>> getBaseCollectionFromDB(
          String? collection) =>
      (super.noSuchMethod(
              Invocation.method(#getBaseCollectionFromDB, [collection]),
              returnValue: Future<_i2.QuerySnapshot<Object?>>.value(
                  _FakeQuerySnapshot_0<Object?>()))
          as _i4.Future<_i2.QuerySnapshot<Object?>>);
  @override
  _i4.Future<_i2.QuerySnapshot<Object?>> getUserByIdFromDB(
          String? collection, String? id) =>
      (super.noSuchMethod(
              Invocation.method(#getUserByIdFromDB, [collection, id]),
              returnValue: Future<_i2.QuerySnapshot<Object?>>.value(
                  _FakeQuerySnapshot_0<Object?>()))
          as _i4.Future<_i2.QuerySnapshot<Object?>>);
  @override
  _i4.Future<_i2.QueryDocumentSnapshot<Object?>?> getRandomUserFromDB(
          _i6.BaseUser? user, String? randomId) =>
      (super.noSuchMethod(
              Invocation.method(#getRandomUserFromDB, [user, randomId]),
              returnValue: Future<_i2.QueryDocumentSnapshot<Object?>?>.value())
          as _i4.Future<_i2.QueryDocumentSnapshot<Object?>?>);
  @override
  _i4.Future<_i5.User?> findUserType(String? id) =>
      (super.noSuchMethod(Invocation.method(#findUserType, [id]),
          returnValue: Future<_i5.User?>.value()) as _i4.Future<_i5.User?>);
  @override
  _i4.Future<void> uploadProfilePhoto(_i7.Expert? expert) =>
      (super.noSuchMethod(Invocation.method(#uploadProfilePhoto, [expert]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void addMessageIntoDB(
          _i5.User? senderUser, _i8.Chat? chat, _i9.Message? message) =>
      super.noSuchMethod(
          Invocation.method(#addMessageIntoDB, [senderUser, chat, message]),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i2.QuerySnapshot<Object?>> getMessagesStreamFromDB(
          String? pairChatId) =>
      (super.noSuchMethod(
              Invocation.method(#getMessagesStreamFromDB, [pairChatId]),
              returnValue: Stream<_i2.QuerySnapshot<Object?>>.empty())
          as _i4.Stream<_i2.QuerySnapshot<Object?>>);
  @override
  void removeMessagesFromDB(String? pairChatId) =>
      super.noSuchMethod(Invocation.method(#removeMessagesFromDB, [pairChatId]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> setMessagesHasRead(_i5.User? senderUser, _i8.Chat? chat) =>
      (super.noSuchMethod(
          Invocation.method(#setMessagesHasRead, [senderUser, chat]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void upgradePendingToActiveChatIntoDB(_i5.User? senderUser, _i8.Chat? chat) =>
      super.noSuchMethod(
          Invocation.method(
              #upgradePendingToActiveChatIntoDB, [senderUser, chat]),
          returnValueForMissingStub: null);
  @override
  void removeChatFromDB(_i5.User? senderUser, _i8.Chat? chat) => super
      .noSuchMethod(Invocation.method(#removeChatFromDB, [senderUser, chat]),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i2.QuerySnapshot<Object?>> getChatsStreamFromDB(
          _i5.User? user, String? chatCollection) =>
      (super.noSuchMethod(
              Invocation.method(#getChatsStreamFromDB, [user, chatCollection]),
              returnValue: Stream<_i2.QuerySnapshot<Object?>>.empty())
          as _i4.Stream<_i2.QuerySnapshot<Object?>>);
  @override
  _i4.Future<void> addReportIntoDB(String? id, _i10.Report? report) =>
      (super.noSuchMethod(Invocation.method(#addReportIntoDB, [id, report]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i2.QuerySnapshot<Object?>> getReportsFromDB(String? id) =>
      (super.noSuchMethod(Invocation.method(#getReportsFromDB, [id]),
              returnValue: Future<_i2.QuerySnapshot<Object?>>.value(
                  _FakeQuerySnapshot_0<Object?>()))
          as _i4.Future<_i2.QuerySnapshot<Object?>>);
  @override
  _i4.Future<void> addDiaryPageIntoDB(String? id, _i11.DiaryPage? diaryPage) =>
      (super.noSuchMethod(
          Invocation.method(#addDiaryPageIntoDB, [id, diaryPage]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateDiaryPageIntoDB(
          String? id, _i11.DiaryPage? diaryPage) =>
      (super.noSuchMethod(
          Invocation.method(#updateDiaryPageIntoDB, [id, diaryPage]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> setFavouriteDiaryNotesIntoDB(
          String? id, _i11.DiaryPage? diaryPage) =>
      (super.noSuchMethod(
          Invocation.method(#setFavouriteDiaryNotesIntoDB, [id, diaryPage]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Stream<_i2.QuerySnapshot<Object?>> getDiaryPagesStreamFromDB(
          String? id) =>
      (super.noSuchMethod(Invocation.method(#getDiaryPagesStreamFromDB, [id]),
              returnValue: Stream<_i2.QuerySnapshot<Object?>>.empty())
          as _i4.Stream<_i2.QuerySnapshot<Object?>>);
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i12.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set loggedUser(_i5.User? _loggedUser) =>
      super.noSuchMethod(Invocation.setter(#loggedUser, _loggedUser),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> loadLoggedUserFromDB() =>
      (super.noSuchMethod(Invocation.method(#loadLoggedUserFromDB, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void createUserFromSignUpForm(_i13.BaseUserSignUpForm? baseUserSignUpForm) =>
      super.noSuchMethod(
          Invocation.method(#createUserFromSignUpForm, [baseUserSignUpForm]),
          returnValueForMissingStub: null);
}
