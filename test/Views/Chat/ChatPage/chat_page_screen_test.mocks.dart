// Mocks generated by Mockito 5.0.17 from annotations
// in sApport/test/Views/Chat/ChatPage/chat_page_screen_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:flutter/foundation.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sApport/Model/Chat/active_chat.dart' as _i10;
import 'package:sApport/Model/Chat/anonymous_chat.dart' as _i3;
import 'package:sApport/Model/Chat/expert_chat.dart' as _i9;
import 'package:sApport/Model/Chat/pending_chat.dart' as _i8;
import 'package:sApport/Model/DBItems/message.dart' as _i5;
import 'package:sApport/Model/DBItems/user.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeValueNotifier_0<T> extends _i1.Fake implements _i2.ValueNotifier<T> {
}

/// A class which mocks [AnonymousChat].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnonymousChat extends _i1.Mock implements _i3.AnonymousChat {
  MockAnonymousChat() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get collection =>
      (super.noSuchMethod(Invocation.getter(#collection), returnValue: '')
          as String);
  @override
  String get peerCollection =>
      (super.noSuchMethod(Invocation.getter(#peerCollection), returnValue: '')
          as String);
  @override
  set peerUser(_i4.User? _peerUser) =>
      super.noSuchMethod(Invocation.setter(#peerUser, _peerUser),
          returnValueForMissingStub: null);
  @override
  String get lastMessage =>
      (super.noSuchMethod(Invocation.getter(#lastMessage), returnValue: '')
          as String);
  @override
  set lastMessage(String? _lastMessage) =>
      super.noSuchMethod(Invocation.setter(#lastMessage, _lastMessage),
          returnValueForMissingStub: null);
  @override
  set lastMessageDateTime(DateTime? _lastMessageDateTime) => super.noSuchMethod(
      Invocation.setter(#lastMessageDateTime, _lastMessageDateTime),
      returnValueForMissingStub: null);
  @override
  int get notReadMessages =>
      (super.noSuchMethod(Invocation.getter(#notReadMessages), returnValue: 0)
          as int);
  @override
  set notReadMessages(int? _notReadMessages) =>
      super.noSuchMethod(Invocation.setter(#notReadMessages, _notReadMessages),
          returnValueForMissingStub: null);
  @override
  _i2.ValueNotifier<List<_i5.Message>> get messages =>
      (super.noSuchMethod(Invocation.getter(#messages),
              returnValue: _FakeValueNotifier_0<List<_i5.Message>>())
          as _i2.ValueNotifier<List<_i5.Message>>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i6.Future<void> loadMessages() =>
      (super.noSuchMethod(Invocation.method(#loadMessages, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  void closeListeners() =>
      super.noSuchMethod(Invocation.method(#closeListeners, []),
          returnValueForMissingStub: null);
  @override
  void addListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [PendingChat].
///
/// See the documentation for Mockito's code generation for more information.
class MockPendingChat extends _i1.Mock implements _i8.PendingChat {
  MockPendingChat() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get collection =>
      (super.noSuchMethod(Invocation.getter(#collection), returnValue: '')
          as String);
  @override
  String get peerCollection =>
      (super.noSuchMethod(Invocation.getter(#peerCollection), returnValue: '')
          as String);
  @override
  set peerUser(_i4.User? _peerUser) =>
      super.noSuchMethod(Invocation.setter(#peerUser, _peerUser),
          returnValueForMissingStub: null);
  @override
  String get lastMessage =>
      (super.noSuchMethod(Invocation.getter(#lastMessage), returnValue: '')
          as String);
  @override
  set lastMessage(String? _lastMessage) =>
      super.noSuchMethod(Invocation.setter(#lastMessage, _lastMessage),
          returnValueForMissingStub: null);
  @override
  set lastMessageDateTime(DateTime? _lastMessageDateTime) => super.noSuchMethod(
      Invocation.setter(#lastMessageDateTime, _lastMessageDateTime),
      returnValueForMissingStub: null);
  @override
  int get notReadMessages =>
      (super.noSuchMethod(Invocation.getter(#notReadMessages), returnValue: 0)
          as int);
  @override
  set notReadMessages(int? _notReadMessages) =>
      super.noSuchMethod(Invocation.setter(#notReadMessages, _notReadMessages),
          returnValueForMissingStub: null);
  @override
  _i2.ValueNotifier<List<_i5.Message>> get messages =>
      (super.noSuchMethod(Invocation.getter(#messages),
              returnValue: _FakeValueNotifier_0<List<_i5.Message>>())
          as _i2.ValueNotifier<List<_i5.Message>>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i6.Future<void> loadMessages() =>
      (super.noSuchMethod(Invocation.method(#loadMessages, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  void closeListeners() =>
      super.noSuchMethod(Invocation.method(#closeListeners, []),
          returnValueForMissingStub: null);
  @override
  void addListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [ExpertChat].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpertChat extends _i1.Mock implements _i9.ExpertChat {
  MockExpertChat() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get collection =>
      (super.noSuchMethod(Invocation.getter(#collection), returnValue: '')
          as String);
  @override
  String get peerCollection =>
      (super.noSuchMethod(Invocation.getter(#peerCollection), returnValue: '')
          as String);
  @override
  set peerUser(_i4.User? _peerUser) =>
      super.noSuchMethod(Invocation.setter(#peerUser, _peerUser),
          returnValueForMissingStub: null);
  @override
  String get lastMessage =>
      (super.noSuchMethod(Invocation.getter(#lastMessage), returnValue: '')
          as String);
  @override
  set lastMessage(String? _lastMessage) =>
      super.noSuchMethod(Invocation.setter(#lastMessage, _lastMessage),
          returnValueForMissingStub: null);
  @override
  set lastMessageDateTime(DateTime? _lastMessageDateTime) => super.noSuchMethod(
      Invocation.setter(#lastMessageDateTime, _lastMessageDateTime),
      returnValueForMissingStub: null);
  @override
  int get notReadMessages =>
      (super.noSuchMethod(Invocation.getter(#notReadMessages), returnValue: 0)
          as int);
  @override
  set notReadMessages(int? _notReadMessages) =>
      super.noSuchMethod(Invocation.setter(#notReadMessages, _notReadMessages),
          returnValueForMissingStub: null);
  @override
  _i2.ValueNotifier<List<_i5.Message>> get messages =>
      (super.noSuchMethod(Invocation.getter(#messages),
              returnValue: _FakeValueNotifier_0<List<_i5.Message>>())
          as _i2.ValueNotifier<List<_i5.Message>>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i6.Future<void> loadMessages() =>
      (super.noSuchMethod(Invocation.method(#loadMessages, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  void closeListeners() =>
      super.noSuchMethod(Invocation.method(#closeListeners, []),
          returnValueForMissingStub: null);
  @override
  void addListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [ActiveChat].
///
/// See the documentation for Mockito's code generation for more information.
class MockActiveChat extends _i1.Mock implements _i10.ActiveChat {
  MockActiveChat() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get collection =>
      (super.noSuchMethod(Invocation.getter(#collection), returnValue: '')
          as String);
  @override
  String get peerCollection =>
      (super.noSuchMethod(Invocation.getter(#peerCollection), returnValue: '')
          as String);
  @override
  set peerUser(_i4.User? _peerUser) =>
      super.noSuchMethod(Invocation.setter(#peerUser, _peerUser),
          returnValueForMissingStub: null);
  @override
  String get lastMessage =>
      (super.noSuchMethod(Invocation.getter(#lastMessage), returnValue: '')
          as String);
  @override
  set lastMessage(String? _lastMessage) =>
      super.noSuchMethod(Invocation.setter(#lastMessage, _lastMessage),
          returnValueForMissingStub: null);
  @override
  set lastMessageDateTime(DateTime? _lastMessageDateTime) => super.noSuchMethod(
      Invocation.setter(#lastMessageDateTime, _lastMessageDateTime),
      returnValueForMissingStub: null);
  @override
  int get notReadMessages =>
      (super.noSuchMethod(Invocation.getter(#notReadMessages), returnValue: 0)
          as int);
  @override
  set notReadMessages(int? _notReadMessages) =>
      super.noSuchMethod(Invocation.setter(#notReadMessages, _notReadMessages),
          returnValueForMissingStub: null);
  @override
  _i2.ValueNotifier<List<_i5.Message>> get messages =>
      (super.noSuchMethod(Invocation.getter(#messages),
              returnValue: _FakeValueNotifier_0<List<_i5.Message>>())
          as _i2.ValueNotifier<List<_i5.Message>>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i6.Future<void> loadMessages() =>
      (super.noSuchMethod(Invocation.method(#loadMessages, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  void closeListeners() =>
      super.noSuchMethod(Invocation.method(#closeListeners, []),
          returnValueForMissingStub: null);
  @override
  void addListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
