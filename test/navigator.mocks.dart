// Mocks generated by Mockito 5.0.17 from annotations
// in sApport/test/Views/Profile/expert_profile_screen_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sApport/Router/app_router_delegate.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeWidget_0 extends _i1.Fake implements _i2.Widget {
  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [AppRouterDelegate].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppRouterDelegate extends _i1.Mock implements _i3.AppRouterDelegate {
  MockAppRouterDelegate() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasDialog =>
      (super.noSuchMethod(Invocation.getter(#hasDialog), returnValue: false)
          as bool);
  @override
  set hasDialog(bool? _hasDialog) =>
      super.noSuchMethod(Invocation.setter(#hasDialog, _hasDialog),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i2.Widget build(_i2.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#build, [context]),
          returnValue: _FakeWidget_0()) as _i2.Widget);
  @override
  _i4.Future<bool> popRoute() =>
      (super.noSuchMethod(Invocation.method(#popRoute, []),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  void pushPage({String? name, dynamic arguments}) => super.noSuchMethod(
      Invocation.method(#pushPage, [], {#name: name, #arguments: arguments}),
      returnValueForMissingStub: null);
  @override
  void pop() => super.noSuchMethod(Invocation.method(#pop, []),
      returnValueForMissingStub: null);
  @override
  String getLastRoute() =>
      (super.noSuchMethod(Invocation.method(#getLastRoute, []), returnValue: '')
          as String);
  @override
  void replace({String? name, dynamic arguments}) => super.noSuchMethod(
      Invocation.method(#replace, [], {#name: name, #arguments: arguments}),
      returnValueForMissingStub: null);
  @override
  void replaceAll({String? name, dynamic arguments}) => super.noSuchMethod(
      Invocation.method(#replaceAll, [], {#name: name, #arguments: arguments}),
      returnValueForMissingStub: null);
  @override
  void replaceAllButNumber(int? start,
          {List<_i2.RouteSettings>? routeSettingsList = const []}) =>
      super.noSuchMethod(
          Invocation.method(#replaceAllButNumber, [start],
              {#routeSettingsList: routeSettingsList}),
          returnValueForMissingStub: null);
  @override
  void addAll(List<_i2.RouteSettings>? list) =>
      super.noSuchMethod(Invocation.method(#addAll, [list]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> setNewRoutePath(List<_i2.RouteSettings>? configuration) =>
      (super.noSuchMethod(Invocation.method(#setNewRoutePath, [configuration]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> setInitialRoutePath(
          List<_i2.RouteSettings>? configuration) =>
      (super.noSuchMethod(
          Invocation.method(#setInitialRoutePath, [configuration]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> setRestoredRoutePath(
          List<_i2.RouteSettings>? configuration) =>
      (super.noSuchMethod(
          Invocation.method(#setRestoredRoutePath, [configuration]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void addListener(_i5.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i5.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
